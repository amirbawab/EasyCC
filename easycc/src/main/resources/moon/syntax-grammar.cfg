prog            -> #createGlobalTable# classDeclRpt progBody #parent#
classDeclRpt    -> classDecl classDeclRpt | EPSILON
classDecl       -> 'T_CLASS' classIden #createClassTableAndEntry# classBody semicolon #parent#
classIden       -> 'T_IDENTIFIER'
classBody       -> 'T_OPEN_CURLY' varDeclRptFunc closeCurly
closeCurly      -> 'T_CLOSE_CURLY'
semicolon       -> 'T_SEMICOLON'
varDeclRptFunc  -> type #type# varFuncIden varFuncDisamb | EPSILON
varFuncIden		-> 'T_IDENTIFIER'
varFuncDisamb   -> #createVarEntry# arraySizeRpt #popGroupStack1# semicolon varDeclRptFunc | #createFunctionEntryAndTable# #popGroupStack1# 'T_OPEN_PAREN' fParams closeParen funcBody semicolon #popGroupStackFunction# #parent# funcDefRpt
closeParen		-> 'T_CLOSE_PAREN'
funcDefRpt      -> type #type# funcDefIden #createFunctionEntryAndTable# #popGroupStack1# openParen fParams closeParen funcBody semicolon #popGroupStackFunction# #parent# funcDefRpt | EPSILON
funcDefIden		-> 'T_IDENTIFIER'
openParen		-> 'T_OPEN_PAREN'
arraySizeRpt    -> arraySize arraySizeRpt | EPSILON
arraySize       -> 'T_OPEN_SQUARE' arraySizeInt #moreType# arraySizeCloSq
arraySizeInt	-> 'T_INTEGER'
arraySizeCloSq	-> 'T_CLOSE_SQUARE'
type            -> 'T_INT_TYPE' | 'T_FLOAT_TYPE' | 'T_IDENTIFIER'
fParams         -> type #type# fParamsIden #createParamEntry# arraySizeRpt #popGroupStack1# fParamsTailRpt | EPSILON
fParamsIden		-> 'T_IDENTIFIER'
fParamsTail     -> 'T_COMMA' type #type# fParamsIden #createParamEntry# arraySizeRpt #popGroupStack1#
fParamsTailRpt  -> fParamsTail fParamsTailRpt | EPSILON
progBody        -> 'T_PROGRAM' #createProgramEntryAndTable# funcBody semicolon #parent# funcDefRpt
funcBody        -> 'T_OPEN_CURLY' varDeclRptSt closeCurly
varDeclRptSt    -> 'T_INT_TYPE' #type# identifier #createVarEntry# arraySizeRpt #popGroupStack1# semicolon varDeclRptSt
                | 'T_FLOAT_TYPE' #type# identifier #createVarEntry# arraySizeRpt #popGroupStack1# semicolon varDeclRptSt
                | 'T_IDENTIFIER' varDeclRptStDis
                | 'T_IF' openParen expr #logicalCheck# closeParen then #ifCheck# statBlock else #elseCheck# statBlock #endIf# semicolon statementRpt
                | 'T_FOR' #createForTable# openParen type #type# identifier #createVarEntry# #popGroupStack1# #useVar# #useVarCheck# assignOp #useAssignOp# expr #mathAssignOp# #forInit# semicolon relExpr #logicalCheck# #forCheck# semicolon assignStat #forMath# closeParen statBlock #endFor# semicolon #parent# statementRpt
                | 'T_GET' openParen variable #useGet# closeParen semicolon statementRpt
                | 'T_PUT' openParen expr #usePut# closeParen semicolon statementRpt
                | 'T_RETURN' openParen expr closeParen semicolon #functionReturn# statementRpt
                | EPSILON
then			-> 'T_THEN'
else			-> 'T_ELSE'
identifier		-> 'T_IDENTIFIER'               
varDeclRptStDis -> #type# 'T_IDENTIFIER' #createVarEntry# arraySizeRpt #popGroupStack1# semicolon varDeclRptSt | #useVar# idnestRptIdDiIn assignOp #useAssignOp# expr #mathAssignOp# semicolon statementRpt
statementRpt    -> statement statementRpt | EPSILON
statement       -> 'T_IDENTIFIER' #useVar# idnestRptIdDiIn assignOp #useAssignOp# expr #mathAssignOp# semicolon
                | 'T_IF' openParen expr #logicalCheck# closeParen then #ifCheck# statBlock else #elseCheck# statBlock #endIf# semicolon
                | 'T_FOR' #createForTable# openParen type #type# identifier #createVarEntry# #popGroupStack1# #useVar# #useVarCheck# assignOp #useAssignOp# expr #mathAssignOp# #forInit# semicolon relExpr #logicalCheck# #forCheck# semicolon assignStat #forMath# closeParen statBlock #endFor# semicolon #parent#
                | 'T_GET' openParen variable #useGet# closeParen semicolon
                | 'T_PUT' openParen expr #usePut# closeParen semicolon
                | 'T_RETURN' openParen expr closeParen semicolon #functionReturn#
expr            -> arithExpr exprDisamb
exprDisamb      -> relOp #useCompareOp# arithExpr #mathCompareOp# | EPSILON
arithExpr       -> term arithExprRpt
arithExprRpt    -> addOp #useAddOp# term #mathAddOp# arithExprRpt | EPSILON
relExpr         -> arithExpr relOp #useCompareOp# arithExpr #mathCompareOp#
statBlock       -> 'T_OPEN_CURLY' statementRpt closeCurly | statement | EPSILON
relOp           -> 'T_GREATER_THAN' | 'T_LESS_THAN' | 'T_LESS_OR_EQUAL' | 'T_GREATER_OR_EQUAL' | 'T_IS_NOT_EQUAL' | 'T_IS_EQUAL'
assignOp        -> 'T_ASSIGN'
assignStat      -> variable assignOp #useAssignOp# expr #mathAssignOp#
variable        -> 'T_IDENTIFIER' #useVar# idnestRptIdDiIn
idnestRptIdDiFa -> #useVar# indiceRpt #useVarCheck# idnestRptIdDFD
                | #useFunction# 'T_OPEN_PAREN' aParams closeParen #useFunctionCheck#
idnestRptIdDFD  -> 'T_DOT' identifier idnestRptIdDiFaU | EPSILON
idnestRptIdDiFaU -> #useVarBasedOnLastVar# indiceRpt #useVarBasedOnLastVarCheck# idnestRptIdDFD
                | #useFunctionBasedOnLastVar# 'T_OPEN_PAREN' aParams closeParen #useFunctionBasedOnLastVarCheck#
idnestRptIdDiIn -> indiceRpt #useVarCheck# indiceRptDis
indiceRptDis    -> 'T_DOT' identifier #useVarBasedOnLastVar# indiceRpt #useVarBasedOnLastVarCheck# indiceRptDis | EPSILON
indiceRpt       -> 'T_OPEN_SQUARE' arithExpr #varIndex# closeSquare indiceRpt | EPSILON
closeSquare		-> 'T_CLOSE_SQUARE'
sign            -> 'T_PLUS' | 'T_MINUS'
term            -> factor termRpt
termRpt         -> multOp #useMultOp# factor #mathMultOp# termRpt | EPSILON
factor          -> 'T_IDENTIFIER' idnestRptIdDiFa
                | 'T_INTEGER' #useInt#
                | 'T_FLOAT' #useFloat#
                | 'T_OPEN_PAREN' arithExpr closeParen
                | 'T_NOT' factor #useNot#
                | sign factor
aParams         -> expr #functionParam# aParamsTailRpt | EPSILON
aParamsTailRpt  -> aParamsTail aParamsTailRpt | EPSILON
aParamsTail     -> 'T_COMMA' expr #functionParam#
addOp           -> 'T_PLUS' | 'T_MINUS' | 'T_OR'
multOp          -> 'T_MULTIPLY' | 'T_DIVIDE' | 'T_AND'