plugins {
    id "org.sonarqube" version "2.0.1"
    id "jacoco"
}

apply plugin: 'application'
apply plugin: LexicalAnalysisPlugin
apply plugin: SyntaxAnalysisPlugin
apply plugin: SemanticAnalysisPlugin

version = '1.0'

mainClassName = "EasyCC"

dependencies {
    compile project(':easycc:code-generation')
    compile project(':dev-gui')
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

lexicalAnalyzer {
    machinePath = "/calculator/lexical-machine.json"
    tokensPath = "/calculator/lexical-tokens.json"
    messagesPath = "/calculator/lexical-messages.json"
}

syntaxAnalyzer {
    grammarPath = "/calculator/syntax-grammar.cfg"
    messagesPath = "/calculator/syntax-messages.json"
    parseStrategy = "parser.strategy.LLPP.LLPP"
}

semanticAnalyzer {
    messagesPath = "/calculator/semantic-messages.json"
}

jacoco {
    toolVersion = jacocoToolVersion
}

jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories =  files(sourceSets.main.output)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$buildDir/$sonarReportPath"
    }
}

task fullJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': compilerName,
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    archiveName="${compilerName}.jar"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

run {
    def pArgs = System.getProperty("exec.args")
    if(pArgs != null) {
        args System.getProperty("exec.args").split(" ")
    }
}

task buildCompiler(dependsOn: 'fullJar') {
    doLast {
        println "Deleting ${compilerPath} (if any)"
        file(compilerPath).deleteDir()

        println "Creating ${compilerPath}"
        file(compilerPath).mkdirs()

        def runFileSh = file("${compilerPath}/run.sh")
        def runFileBat = file("${compilerPath}/run.bat")

        runFileSh << "java "
        runFileBat << "java "

        lexicalAnalyzer.getValues().each {
            runFileSh << "${it} "
            runFileBat << "${it} "
        }
        syntaxAnalyzer.getValues().each {
            runFileSh << "${it} "
            runFileBat << "${it} "
        }

        runFileSh << "-jar ${compilerName}.jar \"\$@\""
        runFileSh.setExecutable(true)
        runFileSh.createNewFile()

        runFileBat << "-jar ${compilerName}.jar %*"
        runFileBat.setExecutable(true)
        runFileBat.createNewFile()

        println "Copying compiler jar"
        copy {
            from file("${buildDir}/libs/${compilerName}.jar")
            into file("${compilerPath}")
        }

        def dummyFile = file("${compilerPath}/dummy.txt")
        dummyFile << "1+2+3"
    }
}

